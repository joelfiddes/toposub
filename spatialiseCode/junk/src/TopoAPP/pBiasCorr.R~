#compute precipitation factor
#requires data at 3hr intervals
#apply 1 year only 1 oct - 1 oct
#format date =DDMMYYYYhhmm (GEOtop)

#df=read.table('/home/joel/src/hobbes/results_points/sim/box7/sim1/out/ground.txt',sep=',',header=T)
#df=df[1:3200,]
#dat=df$X100.000000

meltDate<-function(dat ,date, numeric=TRUE, max.mis=8){
require(zoo)
#year		<-	substring(df$Date12.DDMMYYYYhhmm.,7,10)
year		<-	substring(date,7,10)
max.mis		<-	max.mis		#max of NA values per ibutton for interpolation, otherwise ibutton gets removed
###snow
m1	<-	3		#max. temperature for snow
m2	<-	0.5		#min. temperature snow can disappear
t1	<-	8		#Number of measurements per day
v1	<-	0.1		#max. daily sd indicating snow for POSITIVE GST
v2	<-	0.3		#max. daily sd indicating snow for NEGATIVE GST
###degree of reliance for snow

#time1	<-	year&"-01-01"		#start of relevant time period for degree of reliance for snow
#time2	<-	year&"-03-01"		#end of relevant time period for degree of reliance for snow

MDr.sd	<-	0.4				#min. mean daily standart deviation with no snow cover for specified time period

###zero curtain
v	<- 	0.25	#treshold zero curtain (if dailymax & dailymin is within +/- v, this day is a zero curtian day)
t.FI<-	-50		#min FI during longest snow cover period to extract spring zero curtain period

###############################################################################

### ibutton data
date<-date#df$Date12.DDMMYYYYhhmm.

###if more than one day is missing abort script with error - NEED ADAPT TO 8 INA ROW!
if(length(subset(dat,is.na(dat)))>max.mis){print(paste('ABORT: MORE THAN ', max.mis, ' DATA MISSING',sep='')); return(NA)}

dat_fill<-na.approx(dat, na.rm=F)

#remaining NA treatment (leading, trailing)
dat_fill[is.na(dat_fill)==T]<-5

###iButton names
names.ib<-'bob'#names(data.ib[,2:length(data.ib)])

###output table
stat.melt<-as.data.frame(matrix(ncol = 5, nrow = 1))
names(stat.melt) <- c("ib","FI","RD","MD","MAGST")
stat.melt$ib<-names.ib

#format date
day=substr(date,1,2)
month=substr(date,4,5)
year=substr(date,7,10)
date_format=paste(year,month,day,sep='/')

###daily aggregations
a.sd	<-aggregate(dat_fill,by=list(date_format),FUN=sd)
a.mean	<-aggregate(dat_fill,by=list(date_format),FUN=mean)
a.max	<-aggregate(dat_fill,by=list(date_format),FUN=max)
a.min	<-aggregate(dat_fill,by=list(date_format),FUN=min)

#correct trailing NA's generatd by sd calc
a.sd[is.na(a.sd)==T]<-1

########### CALCULATION
i<-1

#for(ib in names.ib){
#ib="AAa04"
	x<-a.sd$x
	z<-a.min$x
	y<-a.max$x
	w<-a.mean$x
	tt<-data

###MAGST
	stat.melt$MAGST[i]<-mean(w)
	
### freezing index (FI)	
	stat.melt$FI[i]<-sum(w[which(w<0)])

#temporary index
	melt.index <- data.frame(date=a.sd$Group.1 , snow.ind = rep(0,length(z)),zc.ind = rep(0,length(z)))
	

####SNOW	
#melt.index[z$x < v1, "snow.ind"] <- 1
	melt.index[x < ifelse(y<0,yes=v2,no=v1),"snow.ind"] <- 1
	melt.index[y>m1,"snow.ind"]<-0
	index <- melt.index$snow.ind


#pos and neg temps
	temp.index<-data.frame( date=a.sd$Group.1 , ind = rep(0,length(z)))
	temp.index[y<m2,"ind"]<-1
	temp<-temp.index$ind
	
	index.new <- index
	for(ii in 1:(length(index)-1)){
		if(index.new[ii] == 1 & index.new[ii + 1] == 0 & temp[ii + 1] == 1) index.new[ii + 1] <- 1
	}
	
	#ibuttons with to short snow cover length dont get filled up just due to negative temps

	index<-index.new
	melt.index$snow.ind <- index
	
	#end of snow
	j <- 0
	k <- 0
	for(ii in 1:(length(index)-1)){
		if(index[ii] == 1 & index[ii + 1] != 0){j <- j + 1}
		if(index[ii] == 1 & index[ii + 1] == 0 & k > j){j <- 0}
		if(index[ii] == 1 & index[ii + 1] == 0 & k <= j){ k <- j; 
			ind.end <- ii; j <- 0}
	}   
	
	#stat.melt$MD <-as.character(melt.index$date[ind.end])
meltDate=as.character(melt.index$date[ind.end])
meltDateNumeric=round(mean(which(date_format==meltDate)),0)
if(numeric==TRUE){return(meltDateNumeric)}
if(numeric==FALSE){return(meltDate)}
}

