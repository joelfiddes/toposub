#toposcale a temp timeseries
#WARNING: currently heavy on memory. ALPS ok, GREENLAND not ok


root='~/' 
epath='~/gldata/' # dir where raw data is
#=======================================================================================================
#			PACKAGES
#=======================================================================================================
require(ncdf)
require(raster)
require(rgdal)
require(insol)
require(IDPmisc)
require(colorRamps)
require(Hmisc)

#======================================================================================
#	`			SOURCE
#======================================================================================
source(paste(root,'/src/ERA_tools/getERA_src.r',sep=''))
source(paste(root,'/src/code_toposub/toposub_src.r',sep=''))
source(paste(root,'/src/TopoSetup/toposub_crisp.r',sep=''))
source(paste(root,'/src/TopoSetup/toposub_fuzzy.r',sep=''))
source(paste(root,'/src/tscale_final/gt_control.r',sep=''))

source(paste(root,'/src/tscale_final/tscale_src.r',sep=''))
source(paste(root,'/src/tscale_final/surfFluxSrc.r',sep=''))
source(paste(root,'/src/tscale_final/solar_functions.r',sep=''))
source(paste(root,'/src/tscale_final/solar.r',sep=''))






datRoot=epath
tmp=paste(epath,'tmp/',sep='')
outRootPl=paste(tmp,'pressurelevel/',sep='')
outRootmet=paste(tmp,'all/',sep='')
eraBoxEleDem=paste(epath,'orog.cdf',sep='')
dir.create(tmp,recursive=T)
dir.create(outRootPl)
dir.create(outRootmet)

infileG=paste(datRoot, 'gpot.nc',sep='')
infileT=paste(datRoot, 'tpl.nc',sep='')

#=======================================================================================================
#			TOPOSCALE PREPROCESS
#=======================================================================================================

#=======================================================================================================
#			INTERPOLATE 6H FIELDS TO 3H
#=======================================================================================================

#INTERPOLATE TIME
nc=open.ncdf(infileT)
time = get.var.ncdf( nc,'time')
time2=interp6to3(time) #accepts vector
z <- time2*60*60 #make seconds
origin=substr(nc$dim$time$units,13,22)
datesPl<-ISOdatetime(origin,0,0,0,0,0,tz='UTC') + z #dates sequence
save(datesPl, file=paste(outRootPl, '/dates', sep=''))
#write.table(dates,paste(outRootPl, '/dates', sep=''), sep=',', row.names=F, col.names=F)

#INTERPOLATE GRAVITY
nc=open.ncdf(infileG)
var=nc$var$var$name
dat = get.var.ncdf( nc,var)
datInterp=apply(X=dat, MARGIN=c(1,2,3), FUN=interp6to3)
save(datInterp, file=paste(outRootPl, '/gPl', sep=''))

#INTERPOLATE TAIR
nc=open.ncdf(infileT)
var=nc$var$var$name
dat = get.var.ncdf( nc,var)
datInterp=apply(X=dat, MARGIN=c(1,2,3), FUN=interp6to3)
save(datInterp, file=paste(outRootPl, '/tairPl', sep=''))


########################################################################################################
#													
#				CUT FIELDS TO COMMON PERIOD
#									
########################################################################################################

#read dates
load(file=paste(outRootPl, '/dates', sep=''))
#datesPl=dPl$V1 #"1996-01-01 UTC" -- "2009-12-31 18:00:00 UTC"
load(file=paste(outRootSurf, '/dates', sep=''))
#datesSurf=dSurf$V1 #1996-01-01 03:00:00 --2011-12-31 21:00:00

#cut dates - output files should be identical
n1p=which(as.character(datesPl)==startDate)
n2p=which(as.character(datesPl)==endDate)
datesPl_cut=as.character(datesPl[n1p:n2p])
save(datesPl_cut, file=paste(outRootmet, '/datesPl', sep=''))

n1s=which(as.character(datesSurf)==startDate)
n2s=which(as.character(datesSurf)==endDate)
datesSurf_cut=as.character(datesSurf[n1s:n2s])
save(datesSurf_cut, file=paste(outRootmet, '/datesSurf', sep=''))


#PRESSURE LEVEL FIELDS
load(paste(outRootPl, '/gPl', sep=''))
gPl_cut=datInterp[n1p:n2p,,,]
save(gPl_cut, file=paste(outRootmet, '/gPl', sep=''))

load(paste(outRootPl, '/tairPl', sep=''))
tairPl_cut=datInterp[n1p:n2p,,,]
save(tairPl_cut, file=paste(outRootmet, '/tairPl', sep=''))



#system('rm -r /home/joel/data/tscale/tmp/pressurelevel/')
#system('rm -r /home/joel/data/tscale/tmp/surface')







#=======================================================================================================
#			TOPOSCALE
#=======================================================================================================

mf=read.table(paste(spath,'/listpoints.txt',sep=''),header=T,sep=',')
npoints=length(mf$id)

#find ele diff station/gidbox
eraBoxEle<-getEraEle(dem=eraBoxEleDem, eraFile=tFile) # $masl
gridEle<-rep(eraBoxEle[nbox],length(mf$id))
mf$gridEle<-gridEle
eleDiff=mf$ele-mf$gridEle
mf$eleDiff<-eleDiff



#=======================================================================================================
#			READ FILES
#=======================================================================================================

load(paste(outRootmet,'/gPl',sep=''))
load(paste(outRootmet,'/tairPl',sep=''))

#========================================================================
#		COMPUTE SCALED FLUXES - T,Rh,Ws,Wd,LW
#========================================================================

#init dataframes
tPoint=c()


#for actual point only
#nboxSeq=c(1:eraCells)
	#for (nbox in nboxSeq){

		#get grid coordinates
		x<-coordMap$xlab[nbox] # long cell
		y<-coordMap$ylab[nbox]# lat cell

#get long lat centre point of nbox (for solar calcs)
lat=get.var.ncdf(nc, 'lat')
lon=get.var.ncdf(nc, 'lon')
latn=lat[y]
lonn=lon[x]
mf$lat=rep(latn,length(mf$id))
mf$lon=rep(lonn,length(mf$id))

		#extract PL data by nbox coordinates dims[data,xcoord,ycoord, pressurelevel]
		gpl=gPl_cut[,x,y,]
		tpl=tairPl_cut[,x,y,]

		gridEle<-eraBoxEle[nbox]
		stations=mf$id

		#get station attributes
		lsp=mf[stations,]
	
			for (i in 1:length(lsp$id)){

			stationEle=lsp$ele[i]
			nameVec=c(nameVec,(lsp$id[i])) #keeps track of order of stations

			#AIR TEMPERATURE
			t_mod<-plevel2point(gdat=gpl,dat=tpl, stationEle=stationEle)
			tPoint=cbind(tPoint, t_mod)
	
			}
		#for actual point only}
write.table(tPoint,datRoot, sep=',')
